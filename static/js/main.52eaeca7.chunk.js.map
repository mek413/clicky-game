{"version":3,"sources":["components/Cards/index.js","components/Header/index.js","components/Navbar/index.js","App.js","index.js"],"names":["Cards","props","className","alt","name","src","image","onClick","gameLogic","id","Header","Navbar","href","gameText","counter","topScore","cardShuffle","arr","newPos","temp","i","length","Math","floor","random","App","state","cards","alreadyChosen","shuffle","score","highScore","array","clicked","filter","card","includes","setState","push","this","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"0mDAeeA,MAZf,SAAeC,GACb,OACE,yBAAKC,UAAU,4BACX,yBAAKA,UAAU,OACfC,IAAKF,EAAMG,KACXC,IAAKJ,EAAMK,MACXC,QAAS,kBAAMN,EAAMO,UAAUP,EAAMQ,S,MCG9BC,MATf,WACE,OACE,4BAAQR,UAAU,UAChB,2CACA,0G,MCYSS,MAhBf,SAAgBV,GACd,OACE,yBAAKC,UAAU,UACb,4BACE,wBAAIA,UAAU,SACd,uBAAGU,KAAK,gBAAR,gBAEA,4BAAKX,EAAMY,UACX,sCACUZ,EAAMa,QADhB,iBACuCb,EAAMc,a,OCN/CC,EAAc,SAAAC,GAGlB,IAFA,IAAIC,EACJC,EACSC,EAAIH,EAAII,OAAQ,EAAGD,EAAI,EAAGA,IAC/BF,EAASI,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACzCD,EAAOF,EAAIG,GACXH,EAAIG,GAAKH,EAAIC,GACbD,EAAIC,GAAUC,EAElB,OAAOF,GAyEQQ,E,2MApEbC,MAAQ,CACNC,QACAd,SAAU,2BACVC,QAAS,EACTC,SAAU,EACVa,cAAe,I,EAGjBpB,UAAY,SAAAC,GAEV,IAAMoB,EAAUb,EAAYW,GAGtBG,EAAQ,EAAKJ,MAAMZ,QAGnBiB,EAAY,EAAKL,MAAMX,SAGvBiB,EAAQ,EAAKN,MAAME,cAGnBK,EAAU,EAAKP,MAAMC,MAAMO,QAAO,SAAAC,GAAI,OAAIA,EAAK1B,KAAOA,KAGxDuB,EAAMI,SAASH,EAAQ,GAAGxB,IAG5B,EAAK4B,SAAS,CAACxB,SAAU,2BAA4BC,QAAS,EAAGc,cAAe,MAK/EE,EAAQC,EAAa,EAAKM,WAAa,EAAKA,SAAS,CAACtB,SAAUgB,EAAY,IAG7E,EAAKM,SAAS,CAACxB,SAAU,yBAA0BC,QAASgB,EAAQ,IACpEE,EAAMM,KAAKL,EAAQ,GAAGxB,KAGxB,EAAK4B,SAAS,CAAEV,MAAOE,K,wEAGf,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACEhB,SAAU0B,KAAKb,MAAMb,SACrBC,QAASyB,KAAKb,MAAMZ,QACpBC,SAAUwB,KAAKb,MAAMX,WAEvB,kBAAC,EAAD,MACA,yBAAKb,UAAU,aACdqC,KAAKb,MAAMC,MAAMa,KAAI,SAAAL,GAAI,OACxB,kBAAC,EAAD,CACE3B,UAAW,EAAKA,UAChBC,GAAI0B,EAAK1B,GACTgC,IAAKN,EAAK1B,GACVL,KAAM+B,EAAK/B,KACXE,MAAO6B,EAAK7B,iB,GA7DRoC,a,MCblBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.52eaeca7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Cards(props) {\r\n  return (\r\n    <div className=\"img-container click-item\">\r\n        <img className=\"item\" \r\n        alt={props.name} \r\n        src={props.image} \r\n        onClick={() => props.gameLogic(props.id)}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>Clicky Game</h1>\r\n      <h2>Click on an image to earn points, but don't click on any more than once!</h2>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <ul>\r\n        <li className=\"brand\">\r\n        <a href=\"/clicky-game\">Clicky Game</a>\r\n        </li>\r\n        <li>{props.gameText}</li>\r\n        <li>\r\n          Score: {props.counter} | Top Score: {props.topScore}\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport Cards from \"./components/Cards\";\r\nimport Header from \"./components/Header\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport cards from \"./cards.json\";\r\n\r\nconst cardShuffle = arr => {\r\n  let newPos,\r\n  temp;\r\n  for (let i = arr.length -1; i > 0; i--) {\r\n      newPos = Math.floor(Math.random() * (i + 1));\r\n      temp = arr[i];\r\n      arr[i] = arr[newPos];\r\n      arr[newPos] = temp;\r\n  }\r\n  return arr;\r\n};\r\n\r\nclass App extends Component {\r\n    // Setting this.state.friends to the friends json array\r\n    state = {\r\n      cards,\r\n      gameText: \"Click an image to begin!\",\r\n      counter: 0,\r\n      topScore: 0,\r\n      alreadyChosen: []\r\n    };\r\n  \r\n    gameLogic = id => {\r\n      // calls randomizer function we created earlier to shuffle cards index position\r\n      const shuffle = cardShuffle(cards)\r\n\r\n      // grabs current score\r\n      const score = this.state.counter;\r\n\r\n      // grabs top score\r\n      const highScore = this.state.topScore\r\n\r\n      // grabs array for checking already chosen images\r\n      const array = this.state.alreadyChosen;\r\n\r\n      // filters through cards to grab the id of the clicked image\r\n      const clicked = this.state.cards.filter(card => card.id === id);\r\n\r\n      // logic to determine if game ends or continues\r\n      if (array.includes(clicked[0].id)){\r\n\r\n        //ends game if image is selected more than once\r\n        this.setState({gameText: \"You guessed incorrectly!\", counter: 0, alreadyChosen: []});\r\n        \r\n      }else{\r\n\r\n        // checks to see if current score is greater than top score\r\n        (score < highScore) ? this.setState() : this.setState({topScore: highScore + 1})\r\n\r\n        // continues game if image hasn't been clicked already\r\n        this.setState({gameText: \"You guessed correctly!\", counter: score + 1});\r\n        array.push(clicked[0].id);\r\n      }\r\n      // sets the new state to shuffle the cards\r\n      this.setState({ cards: shuffle});\r\n    }\r\n    \r\n    render() {\r\n      return (\r\n        <div>\r\n          <Navbar\r\n            gameText={this.state.gameText}\r\n            counter={this.state.counter}\r\n            topScore={this.state.topScore}\r\n          />\r\n          <Header />\r\n          <div className=\"container\">\r\n          {this.state.cards.map(card => (\r\n            <Cards\r\n              gameLogic={this.gameLogic}\r\n              id={card.id}\r\n              key={card.id}\r\n              name={card.name}\r\n              image={card.image}\r\n            />\r\n          ))}\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n  \r\n  export default App;  ","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}